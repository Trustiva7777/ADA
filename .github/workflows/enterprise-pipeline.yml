name: Enterprise CI/CD Pipeline (Phase 1-3)

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # ═════════════════════════════════════════════════════════════════════════
  # PHASE 1: BUILD & TEST
  # ═════════════════════════════════════════════════════════════════════════
  
  build-backend:
    runs-on: ubuntu-latest
    name: Build & Test Backend (.NET 9.0)
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup .NET 9
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.0.x'
      
      - name: Restore dependencies
        run: dotnet restore SampleApp/BackEnd/BackEnd.csproj
      
      - name: Build Backend
        run: dotnet build SampleApp/BackEnd/BackEnd.csproj -c Release --no-restore
      
      - name: Run Backend Tests
        run: dotnet test SampleApp/BackEnd.Tests/BackEnd.Tests.csproj -c Release --no-build --logger "trx;LogFileName=test-results.trx"
      
      - name: Upload Test Results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results-backend
          path: '**/test-results.trx'
      
      - name: Publish Test Report
        uses: dorny/test-reporter@v1
        if: always()
        with:
          name: Backend Test Results
          path: '**/test-results.trx'
          reporter: 'dotnet trx'

  # ═════════════════════════════════════════════════════════════════════════
  # PHASE 2: SECURITY SCANNING
  # ═════════════════════════════════════════════════════════════════════════
  
  security-scan:
    runs-on: ubuntu-latest
    name: Security Scanning (SAST/Dependency Check)
    needs: build-backend
    
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Run Trivy container scan (if image available)
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
        continue-on-error: true
      
      - name: Upload Trivy results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'
          category: 'trivy'
      
      - name: Secret Detection with gitleaks
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        continue-on-error: true
      
      - name: Dependency Check
        uses: dependency-check/Dependency-Check_Action@main
        with:
          path: '.'
          format: 'JSON'
          args: >
            --enableExperimental
        continue-on-error: true

  # ═════════════════════════════════════════════════════════════════════════
  # PHASE 3: INFRASTRUCTURE VALIDATION
  # ═════════════════════════════════════════════════════════════════════════
  
  terraform-validate:
    runs-on: ubuntu-latest
    name: Terraform Plan & Validate
    needs: [build-backend, security-scan]
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.6.0
      
      - name: Terraform Format Check
        working-directory: ./terraform
        run: terraform fmt -check -recursive
      
      - name: Terraform Init (dev)
        working-directory: ./terraform
        run: terraform init -backend=false
      
      - name: Terraform Validate (dev)
        working-directory: ./terraform
        run: terraform validate
      
      - name: Terraform Plan (dev)
        working-directory: ./terraform
        run: terraform plan -var-file="dev.tfvars" -out=dev.tfplan
      
      - name: Terraform Plan (prod)
        working-directory: ./terraform
        run: terraform plan -var-file="prod.tfvars" -out=prod.tfplan

  # ═════════════════════════════════════════════════════════════════════════
  # DEPLOYMENT (Main branch only)
  # ═════════════════════════════════════════════════════════════════════════
  
  deploy:
    runs-on: ubuntu-latest
    name: Deploy to Staging
    needs: terraform-validate
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment:
      name: staging
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.0.x'
      
      - name: Publish Backend
        run: dotnet publish SampleApp/BackEnd/BackEnd.csproj -c Release -o ./publish/backend
      
      - name: Deploy Notification
        run: echo "✅ Build, test, and security checks passed. Ready for deployment to staging."
      
      - name: Create Deployment Summary
        run: |
          cat > deployment-summary.md << 'EOF'
          # Deployment Summary
          - **Build Status**: ✅ Success
          - **Tests**: ✅ All Passed
          - **Security**: ✅ Scanned
          - **Infrastructure**: ✅ Validated
          - **Deployment**: Ready for staging
          EOF
      
      - name: Upload Deployment Summary
        uses: actions/upload-artifact@v4
        with:
          name: deployment-summary
          path: deployment-summary.md
